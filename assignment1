
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_SIZE 10000    //assign number of data
#define SWAP(x,y,t) ((t)=(x), (x)=(y), (y)=(t))    //SWAP function
int original[MAX_SIZE];    //origianl arry to stor data from random function
int list[MAX_SIZE];    // array for usig each sort algorithm 
int n; 
int sorted[MAX_SIZE]; //array for storing data
clock_t start, finish, used_time = 0;    // variables for measuring running time

//Bubble sort
void bubble_sort(int list[], int n)
{
    int i, j, tmp;
    printf("Bubble sort... ");
    for (i = n - 1; i > 0; i--)
    {
        for (j = 0; j < i; j++)
            if (list[j] > list[j + 1])
                SWAP(list[j], list[j + 1], tmp);
    }
}

//Selection sort
void selection_sort(int list[], int n)
{
    int i, j, least, tmp;

    printf("Selection sort... ");
    for (i = 0; i < n - 1; i++)
    {
        least = i;
        for (j = i + 1; j < n; j++)
            if (list[j] < list[least]) least = j;
        SWAP(list[i], list[least], tmp);
    }
}

//Insertion sort
void insertion_sort(int list[], int n)
{
    int i, j, key;
    printf("Insertion sort... ");
    for (i = 1; i < n; i++)
    {
        key = list[i];
        for (j = i - 1; j >= 0 && list[j] > key; j--)
            list[j + 1] = list[j];
        list[j + 1] = key;
    }
}

//Copy original array
void CopyArr(void)
{
    int i;
    for (i = 0; i < n; i++)
        list[i] = original[i];
}

//Measring running time and print out
void CalcTime(void)
{
    used_time = finish - start;
    printf("Done!\nRunning Time : %f sec\n\n", (float)used_time / CLOCKS_PER_SEC);
}


void main()
{
    int i;

    n = MAX_SIZE;
    for (i = 0; i < n; i++)
        original[i] = rand();

    printf("Number of data : %d\n\n", n);

    CopyArr();
    start = clock();
    selection_sort(list, n);
    finish = clock();
    CalcTime();

    CopyArr();
    start = clock();
    insertion_sort(list, n);
    finish = clock();
    CalcTime();

    CopyArr();
    start = clock();
    bubble_sort(list, n);
    finish = clock();
    CalcTime();
}
